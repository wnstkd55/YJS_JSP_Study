<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
<!-- 어노테이션 기반 사용 설정: com.springbook.biz 패키지 하위의 모든 클래스의 어노테이션을 게더링함 -->
<context:component-scan base-package="com.springbook.biz"></context:component-scan>

<!-- AOP 어노테이션을 검색할 수 있도록 설정 
<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
-->
<!-- DataSource 설정 2. (기본셋팅) :(프로퍼티 파일을 사용한 설정) -->
<context:property-placeholder location="classpath:config/database.properties"/>
<bean id = "dataSource" class = "org.apache.commons.dbcp.BasicDataSource" destroy-method = "close">
	<property name = "driverClassName" value = ${jdbc.driver}/>
	<property name = "url" value = "${jdbc.url}"/>
	<property name = "username" value = "${jdbc.id}"/>
	<property name = "password" value = "${jdbc.password}"/>
</bean>

<!-- Spring JDBC 설정 : JDBCTemplate 객체 생성 -->
<bean id = "jdbcTemplate" class = "org.springframework.jdbc.core.JdbcTemplate">
	<property name = "dataSource" ref = "dataSrouce"/>
</bean>


<!-- DataSource 설정 1. (기본셋팅) : DB연동할때 사용, JDBCTemplate, mybatis, JPA 연동시 사용 
<bean id = "dataSource" class = "org.apache.commons.dbcp.BasicDataSource" destroy-method = "close">
	<property name = "driverClassName" value = "org.h2.Driver"/>
	<property name = "url" value = "jdbc:h2:tcp://localhost/~/test"/>
	<property name = "username" value = "sa"/>
	<property name = "password" value = ""/>
</bean>
-->
<!-- AroundAdvice2 : JoinPoint와 바인드 변수 
<bean id = "log" class = "com.springbook.biz.common.AroundAdvice2"></bean>
-->
<!-- AroundAdvice2 AOP 설정 
<aop:config>
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/> 

	<aop:aspect ref = "log">
		<aop:around pointcut-ref = "allPointcut" method="aroundLog"/>
	</aop:aspect>
	
</aop:config>
-->

<!-- AfterThrowingAdvice2 : JoinPoint와 바인드 변수 
<bean id = "log" class = "com.springbook.biz.common.AfterThrowingAdvice2"></bean>
-->
<!-- AfterThrowingAdvice2 AOP 설정 
<aop:config>
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/> 

	<aop:aspect ref = "log">
		<aop:after-throwing pointcut-ref = "allPointcut" method="exceptionLog" throwing = "exceptionObj"/>
	</aop:aspect>
	
</aop:config>
-->

<!-- AfterReturningAdvice2 : JoinPoint와 바인드 변수 
<bean id = "log" class = "com.springbook.biz.common.AfterReturningAdvice2"></bean>
-->
<!-- AfterReturningAdvice2 AOP 설정 
<aop:config>
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/> 

	<aop:aspect ref = "log">
		<aop:after-returning pointcut-ref = "allPointcut" method="afterReturningLog" returning = "returnObj"/>
	</aop:aspect>
	
</aop:config>
-->

<!-- BeforeAdvice2 : JoinPoint와 바인드 변수
<bean id = "log" class = "com.springbook.biz.common.BeforeAdvice2"></bean>
 -->
<!-- BeforeAdvice2 AOP 설정 
<aop:config>
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/> 

	<aop:aspect ref = "log">
		<aop:before pointcut-ref = "allPointcut" method="beforeLog"/>
	</aop:aspect>
	
</aop:config>
-->

<!-- 
<bean id = "log" class = "com.springbook.biz.common.BeforeAdvice"></bean>
 -->
<!-- AOP 설정 
<aop:config>
	
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
	 
	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/> 
	
	<aop:aspect ref = "log">
		<aop:before pointcut-ref = "allPointcut" method="beforeLog"/>
		
	</aop:aspect>
</aop:config>
-->

<!-- Setter를 사용한 객체 주입: UserServiceImpl.java 설정 
<bean id = "userService" class = "com.springbook.biz.impl.UserServiceImpl">
	<property name="userDAO" ref = "userDAO"></property>		
</bean>

<bean id = "userDAO" class = "com.springbook.biz.impl.UserDAO"></bean>	-->

<!-- 생성자를 사용한 객체 주입: UserServiceImpl.java 설정 
<bean id = "userService" class = "com.springbook.biz.impl.UserServiceImpl">
	<constructor-arg ref = "userDAO"></constructor-arg>		
</bean>
<bean id = "userDAO" class = "com.springbook.biz.impl.UserDAO"></bean>	
-->

<!-- 
<context:component-scan base-package="polymorphism_5_1_1"></context:component-scan>
 -->
<!-- 
 <context:component-scan base-package="polymorphism_5_2_1"></context:component-scan>
 -->
<!-- 스프링 프레임 워크에서 객체를 생성후 DI(의존성 주입)으로 객체를 주입한다. -->	
<!-- SamsungTV 객체를 Spring framework에서 생성해서 DI(의존성 주입) -->

<!-- id : 객체명, class : 패키지명.클래스명 
	polymorphism_3_1_2
-->
<!--	새로운 기능이나 변경 사항이 생겼을때 자바 파일의 수정은 하지 않고 Bean파일만 생성해서 수정
<bean id = "tv" class = "polymorphism_3_1_2.SamsungTV"></bean>
<bean id = "tv" class = "polymorphism_3_1_2.LgTV"></bean>
<bean id = "tv" class = "polymorphism_3_1_2.SkTV"></bean>
-->
<!-- Bean 생성시 id를 생략된 경우 : 클래스 일므의 첫자를 소문자로 바꾸고
		lgTV클라이언트에서 객체 호출 : id = lgTV
 -->
<!-- 
	<bean( id = "tv") class = "polymorphism_3_1_2.LgTV"></bean>
 -->

<!-- scope 옵션
		- singleton : 단 하나의 객체만 생성되도록 설정(기본값)
		- prototype : 여러개의 객체를 생성할 수 있도록 설정
 -->
 <!--  
<bean id = "tv" class = "polymorphism_4_1_2.SamsungTV" scope = "singleton"></bean>
-->

<!-- init-method옵션 : 빈에서 객체를 생성후 호추하는 메소드 -->
<!-- destory-method 옵션 : 객체 종료 직전에 호출되는 메소드 -->
<!--  
<bean id = "tv" class = "polymorphism_4_1_2.SamsungTV" init-method = "initMethod"
	destroy-method = "destroyMethod"></bean>
-->	
<!--  lazy init
		Spring 컨테이너가 객체를 메모리에 로딩하는 방식 : 객체를 메모리에 로딩하는 방식 (메모리에 즉시 로딩)
		lazy-init = "true" : 요청이 있을때만 메모리에 로딩
	
<bean id = "tv" class = "polymorphism_4_1_2.SamsungTV" lazy-init="true"></bean>	
 -->
	
<!-- 생성자에 객체 전달 : 4_2세팅 사항
	<bean> <constructor-arg ref = "객체명"></constructor-arg> </bean>
		ref : 생성자 매개 변수로 참조형 변수를 전달.
		value : 생성자 매개변수로 기본 자료형(정수,문자열...)
 -->
<!-- 	
<bean id = "tv" class = "polymorphism_4_2.SamsungTV">
	<constructor-arg ref = "sony"></constructor-arg>
</bean>
	
<bean id = "sony" class = "polymorphism_4_2.SonySpeaker"></bean>
 -->
<!-- 생성자에 여러개의 매개 변수 설정하기(4_2_1) -->
<!-- 
<bean id = "tv" class = "polymorphism_4_2_1.SamsungTV">
	<constructor-arg ref = "sony"></constructor-arg>
	<constructor-arg value = "3000000"></constructor-arg>
</bean>
	
<bean id = "sony" class = "polymorphism_4_2_1.SonySpeaker"></bean>
 -->

<!-- 별도의 스피커 객체 생성 : 인터페이스를 통한 설정 : (Speaker)-->
<!-- 
<bean id = "tv" class = "polymorphism_4_2_2.SamsungTV">
	<constructor-arg ref = "sony"></constructor-arg>
	<constructor-arg value = "3000000"></constructor-arg>
</bean>
	
<bean id = "sony" class = "polymorphism_4_2_2.SonySpeaker"></bean>
 -->
 
<!-- Setter에 객체 주입 4_3_1 사항
		property name = speaker		: setSpeaker() 호출
		property name = price		: setPrice() 호출
-->
<!-- 
<bean id = "tv" class = "polymorphism_4_3_1.SamsungTV">
	<property name = "speaker" ref = "sony"></property>
	<property name = "price" value = "3000000"></property>
</bean>

<bean id = "sony" class = "polymorphism_4_3_1.SonySpeaker"></bean>
 -->
 
 <!--  p네임 스페이스 사용하기 : 객체 주입을 쉽게 사용하기 4_3_2 세팅 사항
 		p : 변수명-ref = "참조할 객체 이름 또는 아이디"
 		p : 변수명 = "설정값"
  -->
 <!--
<bean id = "tv" class = "polymorphism_4_3_2.SamsungTV"
	p:speaker-ref="sony" p:price="3000000"></bean>
<bean id = "sony" class = "polymorphism_4_3_2.SonySpeaker"></bean>
 <bean id = "apple" class = "polymorphism_4_3_2.AppleSpeaker"></bean>
 -->
</beans>


